sudo ss -tulpn | grep LISTEN
openssl x509 -text -noout -in certificate.crt
openssl req -nodes -new -x509 -keyout ca.key -out ca.pem -days 3650
source /usr/share/bash-completion/completions/systemctl; _systemctl_restart(){ comps=$( __get_restartable_units --system "${COMP_WORDS[1]}" ); compopt -o filenames; COMPREPLY=( $(compgen -o filenames -W '$comps') ); return 0; }; sc(){ echo "restart $1"; sudo systemctl restart $1; sleep 3; sudo systemctl status $1 ; }; complete -F _systemctl_restart sc
journalctl -S -1h -u X
sudo -iu postgres psql -h 127.0.0.1 -c "select * from pg_stat_replication" # see if this is the current leader
sudo -iu postgres psql -h 127.0.0.1 -c "select * from pg_stat_wal_receiver" # see if this is a replica
sudo -iu postgres psql -h 127.0.0.1 -c "select * from pg_replication_slots" # check current replication slots on host
sudo systemd-resolve --flush-caches
sudo dmesg | grep "oom-kill" | grep -oP "(?<=cpuset=)\w+(?=,)" | xargs -I% bash -c "docker inspect % | jq '.[].Name'"
curl -XGET http://localhost:9200/_cat/shards | grep UNASSIGNED | awk {'print $1'} | xargs -i curl -XDELETE "http://localhost:9200/{}"
sudo timedatectl set-ntp false && sudo timedatectl set-time %EVAL"'$(date "+%Y-%m-%d %H:%M:%S")'"%EVAL && sudo timedatectl set-ntp true
setlocal ts=2 sts=2 sw=2 expandtab
s/regex/\=setreg('A', submatch(1), 'V')/n
watch -n 1 docker stack services --format 'table{{.Name}}\\t{{.Replicas}}' staging
curl -u 'prometheus:Mzc3ZDczNzA5ODA4MjMwODYxN2U1ZmNh' -k
Mzc3ZDczNzA5ODA4MjMwODYxN2U1ZmNh
docker service update --update-order start-first --force --detach=false []
sudo -u postgres pcp_node_info -h 127.0.0.1 -w -v -U $(sudo cat /home/postgres/.pcppass | cut -d ":" -f3 )
sudo -u postgres pcp_attach_node -h 127.0.0.1 -w -v -U $(sudo cat /home/postgres/.pcppass | cut -d ":" -f3 ) -n
sudo -u postgres pcp_recovery_node -h 127.0.0.1 -w -v -U $(sudo cat /home/postgres/.pcppass | cut -d ":" -f3 ) -n
redis-cli -p 26379 -c SENTINEL replicas mymaster | grep "name" -A 1
redis-cli role
redis-cli -p 26379 -c SENTINEL master mymaster | grep "ip" -A 1
kubectl delete pod `kubectl get pods | awk '$3 == "CrashLoopBackOff" {print $1}'`
kubectl get events --sort-by='.metadata.creationTimestamp' -A
kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found
kubectl get namespace "EDIT" -o json | tr -d "\n" | sed "s/\"finalizers\": \[[^]]\+\]/\"finalizers\": []/" | kubectl replace --raw /api/v1/namespaces/EDIT/finalize -f -
kubectl run -ti --rm alpine-tools --image=alpine -- sh
kubectl get pods -o jsonpath="{.items[*].spec['initContainers', 'containers'][*].image}" | tr -s '[[:space:]]' '\n' | sort | uniq -c
watch "kubectl get pods -o jsonpath=\"{.items[*].spec['initContainers', 'containers'][*].image}\" | tr -s '[[:space:]]' '\n' | sort | uniq -c"
kubectl get <OBJ> --no-headers --output go-template='{{ range $key, $value := . }} {{ $key }} {{ end }}'
kubectl get jobs | grep "0/1" | awk '{print $1}' | xargs kubectl delete job
kubectl get secrets ca-key -o jsonpath="{['data']['ca\.key']}" | base64 -d
